<templateSet group="Three.js Webinar">
  <template name="init" value="&#9;var three = THREE.Bootstrap('core', 'stats');&#10;&#9;three.renderer.shadowMapEnabled = true;&#10;&#9;three.renderer.shadowMapType = THREE.PCFSoftShadowMap;&#10;&#9;three.renderer.setClearColor(0x808080, 1);&#10;&#10;&#9;three.camera.far = 1e6;&#10;&#9;three.camera.position.y = this.size * this.verticalScale;&#10;&#9;three.camera.updateProjectionMatrix();&#10;&#10;&#9;three.scene.fog = new THREE.FogExp2(0xaaaaaa, 1 / size);&#10;&#10;&#9;this.scene = three.scene;&#10;&#9;this.renderer = three.renderer;&#10;&#9;this.camera = three.camera;&#10;&#10;&#9;three.on('update', this.update.bind(this));" description="Renderer, Camera, Scene &amp; Render Loop (ThreeStrap)" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="lights" value="&#9;var ambient = new THREE.AmbientLight(0x808080);&#10;&#9;this.scene.add(ambient);&#10;&#10;&#9;var spotLight = new THREE.SpotLight(0xfffff0, 2);&#10;&#9;spotLight.position.set(this.size, this.size, this.size);&#10;&#10;&#9;spotLight.castShadow = true;&#10;&#10;&#9;spotLight.shadowMapWidth = 4096;&#10;&#9;spotLight.shadowMapHeight = 4096;&#10;&#10;&#9;spotLight.shadowCameraNear = 500;&#10;&#9;spotLight.shadowCameraFar = 4000;&#10;&#9;spotLight.shadowCameraFov = 30;&#10;&#10;&#9;this.scene.add(spotLight);" description="Setup Lights" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="terrain" value="&#9;var generator = new MidpointDisplacementMapGenerator(this.res + 1, 1.9);&#10;&#9;this.heightData = generator.generate(this.size * this.verticalScale);&#10;&#10;&#9;this.terrainGeometry = new THREE.PlaneGeometry(this.size, this.size, this.res, this.res);&#10;&#10;&#9;var index = 0;&#10;&#9;for (var i = 0; i &lt;= this.res; i++) {&#10;&#9;&#9;for (var j = 0; j &lt;= this.res; j++) {&#10;&#9;&#9;&#9;this.terrainGeometry.vertices[index++].z = this.heightData[i][j];&#10;&#9;&#9;}&#10;&#9;}&#10;&#9;this.terrainGeometry.computeFaceNormals();&#10;&#9;this.terrainGeometry.computeVertexNormals();" description="Setup Terrain" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="materials" value="&#9;var texture = THREE.ImageUtils.loadTexture('terrain.jpg');&#10;&#9;texture.wrapS = THREE.RepeatWrapping;&#10;&#9;texture.wrapT = THREE.RepeatWrapping;&#10;&#9;texture.repeat.set(4, 4);&#10;&#9;texture.anisotropy = this.renderer.getMaxAnisotropy();&#10;&#9;texture.needsUpdate = true;&#10;&#10;&#9;this.planeMaterial = new THREE.MeshLambertMaterial({&#10;&#9;&#9;map: texture,&#10;&#9;&#9;shading: THREE.SmoothShading,&#10;&#9;&#9;ambient: 0x404040&#10;&#9;});&#10;&#10;&#9;var canvas = document.createElement('canvas');&#10;&#9;canvas.width = canvas.height = this.res;&#10;&#9;this.context = canvas.getContext('2d');&#10;&#10;&#9;var snowTexture = new THREE.Texture(canvas);&#10;&#9;snowTexture.needsUpdate = true;&#10;&#10;&#9;this.snowMaterial = new THREE.MeshLambertMaterial({&#10;&#9;&#9;map: snowTexture,&#10;&#9;&#9;bumpMap: THREE.ImageUtils.loadTexture('snow-bump.jpg'),&#10;&#9;&#9;bumpScale: 0.1,&#10;&#9;&#9;shading: THREE.SmoothShading,&#10;&#9;&#9;transparent: true&#10;&#9;});&#10;&#10;&#9;this.rayMaterial = new THREE.ShaderMaterial({&#10;&#9;&#9;uniforms: {&#10;&#9;&#9;&#9;uTime: { type: &quot;f&quot;, value: 0 },&#10;&#9;&#9;&#9;uResolution: { type: &quot;v2&quot;, value: new THREE.Vector2()},&#10;&#9;&#9;&#9;uRay: { type: &quot;t&quot;, value: THREE.ImageUtils.loadTexture('ray.png') }&#10;&#9;&#9;},&#10;&#9;&#9;vertexShader: document.getElementById('vertex').textContent,&#10;&#9;&#9;fragmentShader: document.getElementById('fragment').textContent,&#10;&#9;&#9;transparent: true&#10;&#9;});" description="Setup Materials" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="meshes" value="&#9;var plane = new THREE.Mesh(this.terrainGeometry, this.planeMaterial);&#10;&#9;plane.rotation.x = -Math.PI / 2;&#10;&#9;plane.castShadow = true;&#10;&#9;plane.receiveShadow = true;&#10;&#9;this.scene.add(plane);&#10;&#10;&#9;var snow = new THREE.Mesh(this.terrainGeometry, this.snowMaterial);&#10;&#9;snow.rotation.x = -Math.PI / 2;&#10;&#9;snow.castShadow = true;&#10;&#9;snow.receiveShadow = true;&#10;&#9;this.scene.add(snow);&#10;&#9;this.snow = snow;" description="Setup Meshes" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="particle system" value="&#9;var particles = new THREE.Geometry();&#10;&#9;var pMaterial = new THREE.PointCloudMaterial({&#10;&#9;&#9;transparent: true,&#10;&#9;&#9;vertexColors: true,&#10;&#9;&#9;depthTest: false,&#10;&#9;&#9;map: THREE.ImageUtils.loadTexture('snowflake.png'),&#10;&#9;&#9;size: 1&#10;&#9;});&#10;&#10;&#9;for (var p = 0; p &lt; snow; p++) {&#10;&#9;&#9;var pX = (Math.random() - 0.5) * this.size;&#10;&#9;&#9;var pY = Math.random() * this.size;&#10;&#9;&#9;var pZ = (Math.random() - 0.5) * this.size;&#10;&#9;&#9;var particle = new THREE.Vector3(pX, pY, pZ);&#10;&#9;&#9;particles.vertices.push(particle);&#10;&#9;&#9;var gray = Math.random() * 0.5 + 0.5;&#10;&#9;&#9;particles.colors.push(new THREE.Color(gray, gray, gray));&#10;&#9;}&#10;&#9;this.snowflakes = new THREE.PointCloud(particles, pMaterial);&#10;&#9;this.snowflakes.sortParticles = true;&#10;&#9;this.scene.add(this.snowflakes);" description="Setup Particle System" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="update loop" value="&#9;var t = Date.now();&#10;&#9;var radius = this.size * 0.5;&#10;&#9;var speed = 0.0001;&#10;&#10;&#9;this.camera.position.x = Math.cos(t * speed) * radius;&#10;&#9;this.camera.position.z = Math.sin(t * speed) * radius;&#10;&#10;&#9;var elevation = this.size * this.verticalScale;&#10;&#9;var current = this.camera.position.y;&#10;&#9;var coords = this.globalCoordsToTextureCoords(this.camera.position);&#10;&#9;this.camera.position.y =&#10;&#9;&#9;(elevation + this.heightData[coords.y][coords.x] + 15 * current) / 16;&#10;&#10;&#9;this.camera.lookAt(new THREE.Vector3());&#10;&#10;&#9;var updateSnow = false;&#10;&#9;for (var i = 0; i &lt; this.snowflakes.geometry.vertices.length; i++) {&#10;&#9;&#9;var snowflake = this.snowflakes.geometry.vertices[i];&#10;&#9;&#9;snowflake.y -= Math.random();&#10;&#9;&#9;coords = this.globalCoordsToTextureCoords(snowflake);&#10;&#9;&#9;if (snowflake.y &lt; this.heightData[coords.y][coords.x]) {&#10;&#10;&#9;&#9;&#9;this.context.fillStyle = 'rgba(192, 192, 192, 1)';&#10;&#9;&#9;&#9;this.context.fillRect(&#10;&#9;&#9;&#9;&#9;coords.x + Math.random() - 0.5,&#10;&#9;&#9;&#9;&#9;coords.y + Math.random() - 0.5,&#10;&#9;&#9;&#9;&#9;0.5,&#10;&#9;&#9;&#9;&#9;0.5&#10;&#9;&#9;&#9;);&#10;&#10;&#9;&#9;&#9;snowflake.x = (Math.random() - 0.5) * this.size;&#10;&#9;&#9;&#9;snowflake.y = this.size;&#10;&#9;&#9;&#9;snowflake.z = (Math.random() - 0.5) * this.size;&#10;&#9;&#9;&#9;updateSnow = true;&#10;&#9;&#9;}&#10;&#9;}&#10;&#9;this.snowflakes.verticesNeedUpdate = true;&#10;&#9;if (updateSnow) {&#10;&#9;&#9;this.snowMaterial.map.needsUpdate = true;&#10;&#9;}&#10;&#10;&#9;this.rayMaterial.uniforms.uTime.value = t * 0.001 - Math.floor(t * 0.001);" description="Setup Update Loop" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="event handlers" value="&#9;var $this = this;&#10;&#10;&#9;this.renderer.domElement.onmousedown = function (event) {&#10;&#9;&#9;$this.renderer.domElement.style.cursor = 'crosshair';&#10;&#9;&#9;$this.burnRay.visible = true;&#10;&#10;&#9;&#9;$this.burn(event);&#10;&#9;&#9;var interval = setInterval(function () {&#10;&#9;&#9;&#9;$this.burn(event);&#10;&#9;&#9;}, 1);&#10;&#10;&#9;&#9;window.onmousemove = function (e) {&#10;&#9;&#9;&#9;event = e;&#10;&#9;&#9;};&#10;&#10;&#9;&#9;window.onmouseup = function (e) {&#10;&#9;&#9;&#9;$this.burnRay.visible = false;&#10;&#9;&#9;&#9;clearInterval(interval);&#10;&#9;&#9;&#9;window.onmousemove = null;&#10;&#9;&#9;&#9;window.onmouseup = null;&#10;&#9;&#9;&#9;$this.renderer.domElement.style.cursor = 'default';&#10;&#9;&#9;}&#10;&#9;};" description="Setup Event Handlers" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="burning ray" value="var cylinder = new THREE.CylinderGeometry(0.25, 0.25, 1, 32, 1, false);&#10;&#9;this.burnRay = new THREE.Mesh(cylinder, this.rayMaterial);&#10;&#9;this.burnRay.visible = false;&#10;&#9;this.scene.add(this.burnRay);&#10;}&#10;&#10;SnowScene.prototype.updateRay = function (target) {&#10;&#9;var vstart = this.camera.position.clone();&#10;&#9;vstart.y -= 4; // a little below camera&#10;&#9;var vend = target;&#10;&#10;&#9;var HALF_PI = Math.PI * 0.5;&#10;&#9;var distance = vstart.distanceTo(vend);&#10;&#9;var position = vend.clone().add(vstart).divideScalar(2);&#10;&#10;&#9;var orientation = new THREE.Matrix4();&#10;&#10;&#9;var offsetScale = new THREE.Matrix4();&#10;&#9;offsetScale.makeScale(1, 8 / Math.sqrt(distance), distance);&#10;&#10;&#9;orientation.lookAt(vstart, vend, new THREE.Vector3(0, 1, 0));&#10;&#10;&#9;var offsetRotation = new THREE.Matrix4();&#10;&#9;offsetRotation.makeRotationX(HALF_PI);&#10;&#10;&#9;orientation.multiply(offsetScale);&#10;&#9;orientation.multiply(offsetRotation);&#10;&#9;orientation.setPosition(position);&#10;&#10;&#9;this.burnRay.matrix = new THREE.Matrix4();&#10;&#9;this.burnRay.applyMatrix(orientation);&#10;}&#10;&#10;SnowScene.prototype.burn = function (event) {&#10;&#9;event = event || window.event;&#10;&#10;&#9;var point = this.intersect(event);&#10;&#9;if (point) {&#10;&#9;&#9;this.updateRay(point);&#10;&#10;&#9;&#9;point = this.globalCoordsToTextureCoords(point);&#10;&#10;&#9;&#9;this.context.fillStyle = createSpotGradient(this.context, point, this.res / 32, 8, 16);&#10;&#9;&#9;this.context.arc(point.x, point.y, this.res / 32, 0, 2 * Math.PI);&#10;&#9;&#9;this.context.fill();&#10;&#9;} else {&#10;&#9;&#9;this.scene.remove(this.burnRay);&#10;&#9;}" description="Setup Interactive Ray" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>